import numpy as np
import pandas as pd
from tqdm import tqdm

from buildingblocks.simulation import Simulation
from utils.calibration import sample_ref_size_curve, fit_ref_curve, fit_best_volume, sample_ref_spread
from utils.analysis import sim_analysis
from models.qlearning_agent import QLearningAgent


if __name__ == "__main__":
    NUM_SIM = 5
    SIM_DAYS = 10
    NUM_SEEDS = 5

    MU = 0.2
    SIGMA = 0.5
    MID_PRICE = 75

    NUM_SIMPLE = 20
    NUM_MOM = 5
    NUM_REVERSE = 5
    NUM_INFORMED = 2

    seeds = np.arange(NUM_SEEDS)

    Q = np.array([
        [1.9433344, 1.61255238, 1.76803772, -1.14550026, -0.23918103,
         0.98738734, -0.97860663, 0.11945001],
        [-0.87324127, -1.17321333, -0.86024876, -0.17177218, 0.17586979,
         -0.78401111, -0.49254283, 0.399732],
        [-1.34948562, -0.04398175, 0.72365471, 0.87089375, -0.16543064,
         0.25384431, 0.58914021, 0.72524443],
        [0.09235654, -1.41897424, 0.14466371, 0.00671264, -0.45631733,
         3.34480778, -0.57567326, -1.07141174],
        [1.50145132, -0.67247585, 0.02800624, -0.61107053, 2.43978194,
         0.409228, 1.66652113, 1.04544372],
        [0.55161529, -0.43817082, -1.81768601, -1.27114434, 0.80407779,
         -0.00447288, -0.4685294, 0.98451309],
        [0.46649812, -0.53331943, 1.23857776, -1.73313662, -1.02097086,
         -0.8982106, -1.35972454, -1.06155339],
        [-1.64996209, 0.17542066, 1.29220945, 0.35929055, -0.20157388,
         -0.16133387, -1.4868699, 0.8760332],
        [-1.5878617, -0.54240522, -0.91433305, 1.9864297, -0.63908679,
         -0.57547348, 0.45220903, 0.66439016],
        [-0.54145027, -0.06905157, 1.2225206, -0.68419377, 1.24713266,
         0.04337319, 0.35198792, -1.12471532],
        [-0.69942326, 0.00858465, 0.07515189, -1.21834461, 0.60224274,
         -0.68484781, 0.06157187, -0.50176505],
        [-2.2590211, 0.89500923, -0.55515792, 2.04255222, -0.30608667,
         1.33066729, 0.99639115, -0.35331271],
        [-0.02119698, 0.44690106, -0.26339057, -1.09503177, -0.19608847,
         -1.34262642, 0.93401553, 0.44811158],
        [0.0218394, 1.55815693, 0.67244311, 0.79241067, 1.86988491,
         0.43215267, 1.21787205, 1.22717324],
        [0.11825436, 1.02387446, 0.00368214, 0.03675019, -1.53456026,
         0.1970789, -0.2266978, 0.11381571],
        [-0.63413552, -0.03632424, 0.97160999, 1.66202453, 0.01834181,
         0.9465434, 1.13395471, 1.94883714],
        [1.35386115, -1.6816887, 0.91733602, 0.32068818, -0.55181185,
         -0.91721637, -0.91333647, 0.15204731],
        [0.44786422, -1.2077077, 0.97350713, -1.29808385, 0.75128417,
         0.52452476, -0.3188776, -0.37295312],
        [0.39610342, 0.79609795, 1.32393063, 0.90493701, -0.77932054,
         0.99237681, 0.62441113, 0.91296693],
        [2.00279173, -0.11452767, -0.85013623, 1.15595825, 0.03861857,
         -0.30528612, 0.72248574, -0.31778222],
        [-0.25631091, 0.18205189, -0.0085992, 0.10069113, 0.44641538,
         1.29520566, 0.67926166, -0.11444019],
        [0.01193671, 0.37525051, -0.14709761, 1.14146939, -1.48465976,
         0.61752938, -0.36410727, -1.96160765],
        [0.70101838, 0.17310117, -0.78294249, 1.49843487, -0.60549035,
         -0.02311217, 0.10620965, 1.09678227],
        [-0.23525775, -0.72991198, 0.33603255, 0.59181402, 1.29815501,
         1.09392828, -0.67562306, -0.12988141],
        [0.10322461, 0.97406021, -0.63385157, 0.96655964, -0.60686717,
         -0.83202906, 0.50157568, 0.74333407],
        [-1.08269085, -0.26014768, 0.44196145, 1.07342044, 0.42371087,
         -0.45491207, -0.38280733, -0.48562292],
        [-0.30187313, 0.01198616, 1.04478724, 0.0494196, -0.01851973,
         -0.39559626, -1.21256338, -0.59629635],
        [-0.58708484, -0.85441703, -0.71907448, 0.80180692, -0.90124692,
         0.46257059, 1.17521908, 1.02448753],
        [0.60765059, -0.84707701, 0.00521291, -0.07592318, 0.19002036,
         -2.54477533, -1.17612496, 0.80804354],
        [0.82190173, -0.06672706, 0.63531554, -0.64162978, -0.32772977,
         1.42213576, -1.21223816, 0.6662535],
        [1.47616371, 0.97121475, 0.29600558, -0.41856123, -0.84413078,
         1.36892526, 0.74078577, -1.0583492],
        [-0.67072154, 1.09337687, 1.13359244, 0.76454567, -0.73905715,
         -0.48387286, 0.08286769, -0.48746973]
    ])

    ecn_book = pd.read_csv("MSFT.csv", index_col=0, parse_dates=True)

    epoch_time = pd.offsets.Minute(15)
    params_df = fit_ref_curve(ecn_book, epoch_time)
    ecn_book['bucket_label'] = ecn_book.index.floor(epoch_time).time
    ecn_book['spread'] = (ecn_book['ask_price1'] - ecn_book['bid_price1']).round(6)
    bucket_g = ecn_book.groupby('bucket_label')
    gm_coef_df = bucket_g.apply(fit_best_volume)
    ref_curve_df = sample_ref_size_curve(SIM_DAYS, params_df, gm_coef_df)

    sim_list_ra = []  # cache simulation results

    for seed in seeds:
        print(f'========== Seed {seed} ==========')
        for i in tqdm(range(NUM_SIM)):
            # print(f'========== Simulation # {i}===========')
            rl_agent = QLearningAgent(Q, n_action=8, name='RL Agent')

            sim = Simulation(agent_params={'random': {'num': 1},
                                           'persistent': {'num': 1},
                                           'adaptive': {'num': 1},
                                           'num_simple': NUM_SIMPLE,
                                           'num_mom': NUM_MOM,
                                           'num_reverse': NUM_REVERSE,
                                           'numm_informed': NUM_INFORMED},
                             market_params={'init_mid_price': MID_PRICE, 'mu': MU, 'sig': SIGMA,
                                            'price_impact_coeff': 0.3},
                             ref_curve=sample_ref_size_curve(SIM_DAYS, params_df, gm_coef_df, False),
                             ref_best_spread=sample_ref_spread(SIM_DAYS, ecn_book, False),
                             T=26 * SIM_DAYS,
                             rl_agent=rl_agent,
                             verbose=False)
            sim.run()

            sim_list_ra.append(sim)

    mm_eps_dict_ra, mm_pnl_dict_ra = sim_analysis(sim_list_ra, NUM_SIM, NUM_SEEDS, SIM_DAYS)